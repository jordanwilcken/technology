***** Oracle db *****
She has a different concept of db than SQL Server, MySQL, Postgre, and DB 2 do
***** Oracle db *****

***** Structured Data *****
***** Structured Data *****

***** IBM DB2 *****
***** IBM DB2 *****

***** Unstructured Data *****
***** Unstructured Data *****

***** PL/SQL *****
***** PL/SQL *****

***** SQL dialects *****
***** SQL dialects *****

***** index clustering *****
***** index clustering *****

***** file-based db *****
***** file-based db *****

***** db schema *****
***** db schema *****

***** relational subject area model *****
What? A model that shows relationships between entities that we are interested in.

When would you use it? When you are trying to understand, from a high level, how the interesting entities are related.

Example: A Quidditch team
***** relational subject area model *****

***** relational logical model *****
What? A model that shows relationships between entities that we are interested in.  The model also shows the attributes on the entities.

When would you use it? When you are getting detailed about the entities and their relationships.

Example: A Quidditch team
***** relational logical model *****

***** relational physical model *****
What? The software and hardware implementation of the data model.

Example: A Quidditch database maintained on a server farm running SQL Server.
***** relational physical model *****

***** SQL precision and scale - applies to exact numbers *****
Precision is the maximum number of storable digits.  Scale is the maximum number of decimal places.  Digits will always be reserved for the scale.

Example: NUMERIC(10,4) can hold up to 999,999.9999 - it cannot hold 9,999,999,999
***** SQL precision and scale - applies to exact numbers  *****

***** DDL - Data Definition Language *****
Example: Create, Alter, Drop
***** DDL - Data Definition Language *****

***** DML - Data Manipulation Language *****
Example: Insert, Update, Delete
***** DML - Data Manipulation Language *****

***** TCL - Transaction Control Language *****
Example: Commit, Rollback, Savepoint
***** TCL - Transaction Control Language *****

***** Hibernate *****
***** Hibernate *****

***** ORM *****
***** ORM *****

***** sharding *****
***** sharding *****

***** implicit type conversions in SQL *****
A couple (but there are more) reasons to avoid them:
- They make your code ambiguous.
- It takes computer power to guess what your intentions are. Performance won't be as good.
***** implicit type conversions in SQL *****

***** vertical limit *****
Means limiting the data returned by specifying the columns you are interested in.
***** vertical limit *****

***** horizontal limit *****
Using a criteria to limit the rows returned, for example, returning only colors that end with "-urple".
***** horizontal limit *****

***** aliasing *****
Changing names (like a table name or column name) for understandability purposes. When aliasing columns, you use the "as" keyword.
***** aliasing *****

***** TRUNCATE *****
It's faster than DELETE and doesn't require the undo resources that DELETE does.  The downside is there is NO undo.
***** TRUNCATE *****

***** data page *****
***** data page *****

***** primary key *****
Should be meaningless because meaningful data changes, and we don't want the primary key to change ever.
Can be handled by computers more quickly if it's compact and numeric because that's how computers roll.
***** primary key *****

***** referential integrity *****
Is what prevents you from deleting a parent without first deleting its children. By the same token, referential integrity prevents you from adding a child without first adding its parent.
***** referential integrity *****

***** 1NF *****
Rows must be unique.  Column values can't be collections.
***** 1NF *****

***** 2NF *****
Columns must be dependent on the primary key in its entirety
***** 2NF *****

***** 3NF *****
All non-keys must be mutually independent.
***** 3NF *****

***** scalar subquery *****
She is a subquery that returns only a single value.

Example: SELECT some_count
         FROM (SELECT COUNT(frog_desc) AS some_count from frog);
***** scalar subquery *****

***** correlated subquery *****
Is executed once for each row returned for the containing query.

Example:
		 FROM item;
***** correlated subquery *****

***** equijoin *****
is a join where we use the '=' operator
***** equijoin *****

***** natural join *****
an equijoin where columns from joined tables have the same name (so this is what it's like when doves cry)
***** natural join *****

***** set theory *****
***** set theory *****

***** triggers *****
***** triggers *****

***** views *****
are only as fast as the query that comprises them.  The view's query is executed every time you use it.  A view is not like a copy or a snapshot.  It's like a pre-build eventhandler or an rc file.

You can think of a view as reusable code.  You can also think of it as code that must be maintained.

You can use views to limit a user's access to data or to retrieve data different ways for different users.

The nice thing is that you might be able to use a view to hide complexity.
***** views *****

***** optimizing tables *****
***** optimizing tables *****

***** bean definition *****
***** bean definition *****

***** SQL vs NoSQL *****
NoSQL is supposed to be easier to scale and more friendly towards data that is not well-defined or that often changes.

NoSQL is supposed to be more object-oriented in its interface than SQL is.

According to Mongo's whitepaper, "graph databases are useful in cases where relationships are core to the application, like social networks."

The Mongo whitepaper says key-value "can be useful for representing polymorphic and unstructured data, as the database does not enforce a set schema across key-value pairs."

The Mongo whitepaper says, in essence, that "wide column stores" or "column family stores" are databases that get fancy with the columns.

The Mongo whitepaper says that since data access for key-value and wide column are so simple (querying by a single key value), they are highly optimizable and scalable.

Mongo whitepaper says the document-based approach gives you the most query power.

Some sources on the interwebs will tell you that SQL has still more query power than document-based NoSQL.

Some sources also say you get better transaction support with SQL than you do with NoSQL.

The SQL API is much older and more widely known than its NoSQL counterparts.

What is necessary for top-tier Web sites, according to proponents of NoSQL, is massive scalability, low latency, the ability to grow the capacity of your database on demand and an easier programming model.
***** SQL vs NoSQL *****

***** MySQL *****
She is supposed to be scale-friendly.
She is open source.
***** MySQL *****

***** ACID *****
Atomicity - if a transaction fails, it fails completely, and the database is the same as before the transaction was attempted.

Consistency - if a transaction is invalid it just doesn't go.

Isolation - transactions are mutually independent and must take turns if they are both trying to modify the same data.

Durability - if a transaction succeeds, it will persist.  Even if the system fails.

It seems a transaction is only a transaction if it makes it to the log.
***** ACID *****

***** CAP *****
Consistency.

Availability - whenever I make a query, the database will answer it right away.

Partition tolerance - If one node in my data system is down, some other node in the system can respond to my query.

The CAP theorum says it is impossible to guarantee all 3 at the same time.
***** CAP *****

***** consistent system *****
A system in which writes are immediately visible in subsequent queries.  Mongo has tunable consistency, defined at the query level the Mongo whitepaper says.  Mongo white paper also says that normally key-value and wide column databases are eventually consistent.
***** consistent system *****

***** Hadoop *****
According to hadoop.apache.org, "The Apache Hadoop® project develops open-source software for reliable, scalable, distributed computing."
***** Hadoop *****

***** Spring Framework *****
Spring provides a restful webservice framework primarily through annotations.

Spring's RestTemplate is a class for mapping the response from a restful webservice to a Java object.

Spring's jdbc template takes care of all your relational setup for you.  You can query the data without having to worry about connections and etc.

Spring also provides an easy button for authentication using LDAP.  Other security-related features as well.

Provides a Twitter interface feature.

Provides validation and web-scraping features.

Really, just check the Spring.io guides to see all what she can do.
***** Spring Framework *****

***** Spring Data Redis *****
Provides messaging and a NoSQL datastore of some sort.
***** Spring Data Redis *****

***** YARN *****
According to hadoop.apache.org, "Hadoop YARN [is] a framework for job scheduling and cluster resource management."
***** YARN *****

***** Java Server Faces || Google Web Toolkit *****
***** Java Server Faces || Google Web Toolkit *****

***** JAX-RS *****
An acronym for Java Api for Restful Web Services
***** JAX-RS *****

***** Daemon *****
***** Daemon *****

***** LDAP *****
***** LDAP *****

***** Java Bean *****
***** Java Bean *****

******* Reading **********
Discovering SQL page 209
******* Reading **********
